{"ast":null,"code":"function classname() {\n  var result = {},\n      objects = {},\n      resultString = \"\";\n\n  function add(strings) {\n    classname.each(strings.split(\" \"), function (string) {\n      result[string] = !!string;\n    });\n  }\n\n  classname.each([].slice.call(arguments), function (x) {\n    switch (classname.getType(x)) {\n      case \"string\":\n      case \"number\":\n        add(x);\n        break;\n\n      case \"array\":\n        add(classname.apply(null, x));\n        break;\n\n      case \"element\":\n        add(classname(x.className || \"\"));\n        break;\n\n      case \"nodelist\":\n        add(classname.apply(null, [].slice.call(x)));\n        break;\n\n      case \"jquery\":\n        add(classname.apply(null, x.get()));\n        break;\n\n      case \"object\":\n        objects = classname.extend(objects, x);\n        break;\n    }\n  });\n  result = classname.extend(result, objects);\n  classname.each(result, function (val, key) {\n    if (val) {\n      resultString += \" \" + key;\n    }\n  });\n  return resultString.substr(1);\n}\n\nclassname.setTo = function (elements) {\n  var type = classname.getType(elements);\n\n  if (type === \"element\") {\n    elements = [elements];\n  }\n\n  if (type === \"jquery\") {\n    elements = elements.get();\n  }\n\n  if (type === \"nodelist\") {\n    elements = [].slice.call(elements);\n  }\n\n  return function () {\n    var classNames = classname.apply(null, arguments);\n    classname.each(elements, function (element) {\n      element.className = classNames;\n    });\n  };\n};\n\nclassname.each = function (arr, fn) {\n  var type = classname.getType(arr);\n\n  if (type === \"array\") {\n    for (var i = 0; i < arr.length; i++) {\n      fn(arr[i], i);\n    }\n  }\n\n  if (type === \"object\") {\n    for (var key in arr) {\n      fn(arr[key], key);\n    }\n  }\n};\n\nclassname.getType = function (x) {\n  var type = Object.prototype.toString.call(x).slice(8, -1).toLowerCase();\n\n  if (type === \"object\" && x.jquery) {\n    return \"jquery\";\n  }\n\n  if (type.indexOf(\"element\") > 1) {\n    return \"element\";\n  }\n\n  return type;\n};\n\nclassname.extend = function (obj1, obj2) {\n  var result = {},\n      objs = [obj1, obj2];\n  classname.each(objs, function (obj) {\n    classname.each(obj, function (val, key) {\n      if (obj.hasOwnProperty(key)) {\n        result[key] = val;\n      }\n    });\n  });\n  return result;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = classname;\n}","map":null,"metadata":{},"sourceType":"script"}